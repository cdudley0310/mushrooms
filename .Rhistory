d
```{r setup, code = '../../setup.R'}
library(tidyverse)
mushrooms <- read_csv('mushrooms.csv')
glimpse(mushrooms)
glimpse(mushrooms)
ggplot(mushrooms)
ggplot(mushrooms, aes(x = population)) +
geom_col()
ggplot(mushrooms, aes(x = population)) +
geom_bar()
source('~/Library/Mobile Documents/com~apple~CloudDocs/r/setup.R', echo=TRUE)
# setup (explain what is in setup)
?cor
cor(mushrooms)
cor(is.numeric(mushrooms))
?select
library(tidyverse)
?select
mushrooms %>%
select_if(is.numeric)
mushrooms %>%
select_if(is.numeric) %>%
cor()
glimpse(mushrooms)
?as.factor
mushrooms %>%
mutate_if(is.character, factor)
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor)
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
mutate_all(str_replace_all(., '`', ''))
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
mutate_all(~ str_replace_all(., '`', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~ str_replace_all(., '`', ''))
glimpse(mushrooms)
?rename_all
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '`'))
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '`', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all('`', ''))
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(list(~str_replace_all(., '`', '')))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '`', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '\'', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '\`', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '\\`', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '\\\`', ''))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., 'c', 'YYYY'))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., 'YYYY', 'c'))
glimpse(mushrooms)
mushrooms <- mushrooms %>%
mutate_if(is.character, factor) %>%
rename_all(~str_replace_all(., '-', '_'))
glimpse(mushrooms)
library(skimr)
skim(mushrooms)
glimpse(mushrooms)
mutate_if(is.character, factor)
mutate(gill_attachment = factor(if_else(gill_attachment == TRUE,
't', 'a'))) %>%
mutate_if(is.character, factor)
mutate(gill_attachment = factor(if_else(. == TRUE,
't', 'a'))) %>%
mutate_if(is.character, factor)
mutate(gill_attachment = if_else(gill_attachment == TRUE,
't', 'a')) %>%
mutate_if(is.character, factor)
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_'))
mutate(gill_attachment = factor(if_else(gill_attachment == TRUE,
't', 'a'))) %>%
mutate_if(is.character, factor)
mutate(gill_attachment = factor(if_else(gill_attachment == FALSE,
't', 'a'))) %>%
mutate_if(is.character, factor)
mutate(gill_attachment = factor(if.else(gill_attachment == FALSE,
't', 'a'))) %>%
mutate_if(is.character, factor)
mutate(gill_attachment = factor(ifelse(gill_attachment == FALSE,
't', 'a'))) %>%
mutate_if(is.character, factor)
?ifelse
if_else
?if_else
mushrooms <- read_csv('mushrooms.csv')
glimpse(mushrooms)
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_'))
glimpse(mushrooms)
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_'))
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_')) %>%
mutate(gill_attachment = if_else(gill_attachment == FALSE, 'f', 'a')) %>%
mutate_if(is.character, factor)
skim(mushrooms)
glimpse(mushrooms)
skim(mushrooms)
?read_csv
mushrooms <- read_csv('mushrooms.csv')
mushrooms <- read_csv('mushrooms.csv', cols = cols(`gill-attachment` = col_factor))
mushrooms <- read_csv('mushrooms.csv', col_types = cols(`gill-attachment` = col_factor))
mushrooms <- read_csv('mushrooms.csv', col_types = cols('`gill-attachment`' = f))
mushrooms <- read_csv('mushrooms.csv', col_types = cols('`gill-attachment`' = 'f'))
glimpse(mushrooms)
mushrooms <- read_csv('mushrooms.csv', col_types = cols(`gill-attachment` = 'f'))
glimpse(mushrooms)
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_')) %>%
mutate_if(is.character, factor)
skim(mushrooms)
mushrooms <- read_csv('mushrooms.csv')
glimpse(mushrooms)
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_')) %>%
mutate(gill_attachment =
if_else(as.character(gill_attachment) == FALSE, 'f', 'a')) %>%
mutate_if(is.character, factor)
skim(mushrooms)
mushrooms <- read_csv('mushrooms.csv', col_types = cols(`gill-attachment` = 'f'))
glimpse(mushrooms)
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_')) %>%
mutate_if(is.character, factor)
skim(mushrooms)
ggplot(mushrooms, aes(x = population)) +
geom_bar()
ggplot(mushrooms, aes(x = order(population))) +
geom_bar()
ggplot(mushrooms, aes(x = sort(population))) +
geom_bar()
?ordered
?reorder
?count
ggplot(mushrooms, aes(x = reorder(population, count(population)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, arrange(population)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, table(population)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, -table(population)[population]))) +
geom_bar()
?fct_reorder
ggplot(mushrooms, aes(x = fct_reorder(population, n))) +
geom_bar()
ggplot(mushrooms, aes(x = fct_reorder(population, n, .desc = TRUE))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, fct_reorder(population, n, .desc = TRUE)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, group_by(population) %>% count()))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, count(population)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, -count(.$population)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, -count(mushrooms$population)))) +
geom_bar()
mushrooms %>% count(population)
ggplot(mushrooms, aes(x = fct_reorder(population, -count(population)))) +
geom_bar()
ggplot(mushrooms, aes(x = fct_infreq(population))) +
geom_bar()
?fct_infreq
?reorder
ggplot(mushrooms, aes(x = reorder(population, population, FUN = length))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, -population, FUN = length))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population, FUN = -length))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(-population, population, FUN = length))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population, FUN = rev(length)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population, FUN = rev, length))) +
geom_bar()
ggplot(mushrooms, aes(x = rev(reorder(population, population, FUN = length)))) +
geom_bar()
ggplot(mushrooms, aes(x = -reorder(population, population, FUN = length))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(rev(population), population, FUN = length))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, rev(population), FUN = length))) +
geom_bar()
?length
?sort
ggplot(mushrooms, aes(x = reorder(population, population, FUN = sort, decreasing = TRUE))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population, FUN = sort))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population, function(x) -length(x)))) +
geom_bar()
?rev
?`-`
mushrooms %>% count(desc(population))
mushrooms %>% count(population) %>% arrange(desc(n))
?count
mushrooms %>% count(population, sort = TRUE)
ggplot(mushrooms, aes(x = reorder(population, population, function(x) count(x, sort = TRUE)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, population, tally))) +
geom_bar()
?reorder
skim(mushrooms)
View(mushrooms)
fct_infreq
?check_factor
ggplot(mushrooms, aes(x = reorder(population, order(table(population),
decreasing = TRUE)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, order(table(population),
decreasing = TRUE)))) +
geom_bar()
ggplot(mushrooms, aes(x = reorder(population, order(table(population),
decreasing = TRUE)))) +
geom_bar()
with(mushrooms, order(table(population), decreasing = TRUE))
with(mushrooms, sort(table(population), decreasing = TRUE))
ggplot(mushrooms, aes(x = reorder(population, sort(table(population),
decreasing = TRUE)))) +
geom_bar()
?lvls_reorder
?order
reorder(population, order(table(population), decreasing = TRUE))
?chisq.test
install.packages('assocstats')
# an R script which provides a common setup across all R Markdown documents;
# removes prefix and comment before output and defaults output messages,
# warnings and errors to not show in Knit Markdown documents;
# also defaults fig.align to 'center' and caches chunks for faster knitting
skim(mushrooms)
?skim
skim_forma_defaults()
skim_forma_defaults
skim_format_defaults
skim_format_defaults()
skim_format_defaults()
skim_format_defaults()
show_formats()
?skim_with
show_skimmers()
get_skimmers(which = 'numeric')
show_skimmers(which = 'numeric')
show_skimmers(which = 'factor')
skim_with(factor = list(n = NULL))
skim(mushrooms)
skim_with(factor = list(n = NULL, complete = NULL))
skim(mushrooms)
skim_with(factor = list(n = NULL, complete = NULL),
logical = list(n = NULL, complete = NULL))
skim(mushrooms)
?skim_format
skim_formats()
show_formats()
show_formats('logical')
show_formats('numeric')
show_formats('factor')
show_formats('factors')
show_formats('factors')
show_formats('.levels')
ldksl
??skimr
?vignette
?vignettes
vignette('skimr')
vignettes('skimr')
vignette(package = 'skimr')
?edit
?skim
?skim
skim_tee(mushrooms)
skim_to_wide(mushrooms)
skim_to_list(mushrooms)
unlink('mushrooms_cache', recursive = TRUE)
skim_tee(mushrooms)
# correlation
skim_to_list(mushrooms)
# correlation
unlink('mushrooms_cache', recursive = TRUE)
?skim
skim_tee(mushrooms)
skim(mushrooms)
unlink('mushrooms_cache', recursive = TRUE)
unlink('mushrooms_cache', recursive = TRUE)
unlink('mushrooms_cache', recursive = TRUE)
?skim_format('logical')
skim_format('logical')
show_formats('logical')
show_formats()
xybvu7-Soktow
?col.names
colnames
?colnames
?rmvt
??rmvt
library(mvtnorm)
?dmvt
?stringr()
?pmvt
?qmvt
?pmvt
?pmvnorm
library(sn)
import.packages('sn')
install.packages('sn')
library(sn)
?rmsn
?rmst
??mardiaTest
?princomp
?abline
?rownames
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(skimr)
library(caret)
skim_with(factor = list(n = NULL, complete = NULL),
logical = list(n = NULL, complete = NULL))
# read in the data; column `gill-attachment` as factor
mushrooms <- read_csv('mushrooms.csv', col_types = cols(`gill-attachment` = 'f'))
glimpse(mushrooms)
# convert character variables to factors and replace '-' with '_' in names
mushrooms <- mushrooms %>%
rename_all(~str_replace_all(., '-', '_')) %>%
mutate_if(is.character, factor)
skim(mushrooms)
mushrooms %>%
select(class, everything())
mushrooms_tidy <- mushrooms %>%
select(class, bruises, everything())
mushrooms %>%
select(class, bruises, everything())
?mutate
?mutate_if
mushrooms %>%
select(class, bruises, everything()) %>%
mutate_all(str_replace_all('?', NA))
mushrooms %>%
select(class, bruises, everything()) %>%
mutate_if(str_detect('?'), NA))
mushrooms %>%
select(class, bruises, everything()) %>%
mutate_if(str_detect('?'), NA)
mushrooms %>%
select(class, bruises, everything()) %>%
mutate_if('?', NA)
mushrooms %>%
select(class, bruises, everything()) %>%
na_if('?')
mushrooms %>%
select(class, bruises, everything()) %>%
na_if('?') %>%
skim()
mushrooms %>%
select(class, bruises, everything()) %>%
na_if('?') %>%
skim()
