'^n$' = 'brown',
'^b$' = 'buff',
'^h$' = 'chocolate',
'^r$' = 'green',
'^o$' = 'orange',
'^u$' = 'purple',
'^w$' = 'white',
'^y$' = 'yellow')),
population = str_replace_all(population,
c('^a$' = 'abundant',
'^c$' = 'clustered',
'^n$' = 'numerous',
'^s$' = 'scattered',
'^v$' = 'several',
'^y$' = 'solitary')),
habitat = str_replace_all(habitat,
c('^g$' = 'grasses',
'^l$' = 'leaves',
'^m$' = 'meadows',
'^p$' = 'paths',
'^u$' = 'urban',
'^w$' = 'waste',
'^d$' = 'woods'))) %>%
mutate_all(list(str_to_sentence)) %>%
rename_all(~str_replace_all(., '_', ' ') %>% str_to_title()) %>%
mutate_all(as.factor)
mushrooms
runApp('Mushrooms')
runApp('Mushrooms')
runApp('Mushrooms')
runApp('Mushrooms')
runApp('Mushrooms')
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
library(tidyverse)
library(plotly)
ggplotly(py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5)),
tooltip = c('text'))
View(axis.text.x)
axis.text.x[["vjust"]]
unlink('mushrooms_cache', recursive = TRUE)
unlink('mushrooms_cache', recursive = TRUE)
?str_dup
mushrooms <- read_csv('mushrooms.csv',
col_types = str_c(str_dup('f', 23),
collapse = ''),
na = '?')
mushrooms
str_dup
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
string <- 'string'
str_split(string)
?str_split
string
str_split('string')
str_split(pattern = 'string')
str_split('string', pattern = 'string')
str_split('string', pattern = '')
str_split('string', pattern = '') %>% rev()
str_split('string', pattern = '')
str_split(rev('string'), pattern = '')
str_split('string', pattern = '') %>% rev()
?rev
?"'"
"""
?"""
?'"'
str_split('string', pattern = '') %>% class()
str_split('string', pattern = '') %>% as.vector()
str_split('string', pattern = '') %>% as.vector() %>% rev()
str_split('string', pattern = '')[[1]] %>% rev()
str_split('string', pattern = '')[[1]] %>% rev() %>% str_c()
str_split('string', pattern = '')[[1]] %>% rev() %>% str_c(collapse = '')
unlink('mushrooms_cache', recursive = TRUE)
rm(string
rm(string)
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
unlink('mushrooms_cache', recursive = TRUE)
rm(string)
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(tidyverse)
library(reticulate) # for using Python in R Markdown
import('pandas')
repl_python()
plots(veil_type)
repl_python()
