# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(reticulate) # for using Python in R Markdown
import('pandas')
library(knitr)
library(kableExtra)
# a prefix nulling hook.
# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')
# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
# grab 'comment' setting
comment <- knitr::opts_current$get('comment')
# if NA, replace comment with ''
if(is.na(comment)) comment <- ''
# regex to logically detect ' *[#]' string in x (the output string)
can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'),
x, perl = TRUE)
# check if 'null_prefix' chunk option is set to TRUE
do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
if(can_null && do_null) {
# R print output aligns at the right brace, gather this value - 1
align_index <- regexpr('\\]', x)[1] - 1
# two cases: start or newline; can probably combine into one using refs...
#start
# start of string, any character matching align_index times followed by ]
re <- paste0('^.{', align_index, '}\\]\\s?')
rep <- comment
x <- gsub(re, rep, x) # replace re with empty string in x
# new line
# new line, any character matching align_index times followed by ]
re <- paste0('\\\n.{', align_index, '}\\]\\s?')
rep <- paste0('\n', comment) # new line followed by comment
x <- gsub(re, rep, x) # replace re with new line followed by comment
}
# still unsure what this does...
default_output_hook(x, options)
})
#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
comment = NA,
message = FALSE,
warning = FALSE,
error = FALSE,
background = '#B9B9B9', # for pdf only
fig.align = 'center',
null_prefix = TRUE)
options(width = 100) # increase print output width for skim/glimpse
library(reticulate) # for using Python in R Markdown
import('pandas')
library(tidyverse)
library(plotly)
ggplotly(py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5)),
tooltip = c('text'))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(5)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(5)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 51
size = rel(5)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
rm(axis.text.x)
rm(mushrooms, mushrooms_tidy)
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
ggplotly(py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5)),
tooltip = c('text'))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
class(py$mushrooms)
py$mushrooms
py$mushrooms %>%
unnest(root_stalk)
py$mushrooms
py$mushrooms %>%
unnest(stalk_root)
py$mushrooms %>%
unlist(stalk_root)
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor)
mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
py$mushrooms %>%
mutate(stalk_root = unlist(stalk_root)) %>%
mutate_all(as.factor) %>%
count(class, cap_color, .drop = FALSE) %>%
ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE),
y = n,
fill = class,
text = paste0('Colour: ', cap_color, '<br>',
'Edibility: ', class, '<br>',
'Count: ', n))) +
geom_col(position = 'dodge') +
labs(x = 'Cap Colour', y = 'Count') +
scale_x_discrete(labels = c('Brown' = 'brown',
'Buff' = 'buff',
'Cinnamon' = 'cinnamon',
'Gray' = 'gray',
'Green' = 'green',
'Pink' = 'pink',
'Red' = 'red',
'Purple' = 'purple',
'White' = 'white',
'Yellow' = 'yellow')) +
theme_minimal(base_family = 'Source Sans Pro') +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_text(vjust = 5,
size = rel(1)))
