---
title: "Mushroom Classification"
output:
  html_document:
    df_print: paged
    highlight: kate
    theme: flatly
    toc: yes
  pdf_document:
    toc: yes
---

```{css style, echo = FALSE}
a, a:hover {
  color: #DE3131;
}
code {
  color: #E3A80E;
}
```

```{r setup, include = FALSE}
library(knitr)
library(kableExtra)

# a prefix nulling hook.

# make sure to keep the default for normal processing.
default_output_hook <- knitr::knit_hooks$get('output')

# output hooks handle normal R console output.
knitr::knit_hooks$set(output = function(x, options) {
  
  # grab 'comment' setting
  comment <- knitr::opts_current$get('comment')
  
  # if NA, replace comment with ''
  if(is.na(comment)) comment <- ''
  
  # regex to logically detect ' *[#]' string in x (the output string)
  can_null <- grepl(paste0(comment, '\\s*\\[\\d+\\]'), 
                     x, perl = TRUE)
  
  # check if 'null_prefix' chunk option is set to TRUE
  do_null <- isTRUE(knitr::opts_current$get('null_prefix'))
  
  if(can_null && do_null) {
    
    # R print output aligns at the right brace, gather this value - 1
    align_index <- regexpr('\\]', x)[1] - 1
    
    # two cases: start or newline; can probably combine into one using refs...
    
    #start
    # start of string, any character matching align_index times followed by ]
    re <- paste0('^.{', align_index, '}\\]\\s?')
    rep <- comment
    x <- gsub(re, rep, x) # replace re with empty string in x
    
    # new line
    # new line, any character matching align_index times followed by ]
    re <- paste0('\\\n.{', align_index, '}\\]\\s?')
    rep <- paste0('\n', comment) # new line followed by comment
    x <- gsub(re, rep, x) # replace re with new line followed by comment
  }
  
  # still unsure what this does...
  default_output_hook(x, options)

})

#options(width = 105) # for HTML output only; too wide for pdf
knitr::opts_chunk$set(cache = TRUE,
                      comment = NA,
                      message = FALSE, 
                      warning = FALSE, 
                      error = FALSE,
                      background = '#B9B9B9', # for pdf only
                      fig.align = 'center',
                      null_prefix = TRUE)

options(width = 100) # increase print output width for skim/glimpse
```

```{r r_packages}
library(tidyverse)
library(reticulate) # for using Python in R Markdown
```

```{r choose_python_source, include = FALSE}
import('pandas')
```

```{python python_libraries}
import numpy as np # array management
import pandas as pd # data management
import matplotlib.pyplot as plt # basic graphics
import seaborn as sns # advanced graphics
```

We are going to load our data using `pandas`, but we should first get an idea of what is in the data from the [Mushroom Classification Kaggle page](https://www.kaggle.com/uciml/mushroom-classification), just so we know what we are working with. There appear to be 23 variables in the dataset with the `class` variable indicating whether or not a mushroom is poisonous. Twenty-two of the 23 variables are categorical while the remaining variable, `bruises`, is a boolean of the presence or absense of bruises on the mushroom. For the `bruises` variable, we will simply recode this with values of 'presence' and 'absence' rather than use a boolean. One variable, `root-stalk` also contains missing values which were coded as '?'. Let's make a plan to work the data into a desired format.

1. Import the data with `pd.read_csv`, making sure to indicate that NAs appear in the data as '?'.

2. Rename variables to a programming-friendly name by replacing the '-' word separator with '_'. 

3. Convert the variables from strings to categorical variables, reducing the size and increasing the speed of the data.

```{python load_data}
mushrooms = pd.read_csv('mushrooms.csv', na_values='?')
mushrooms
```

```{python data_types}
mushrooms.dtypes
```

```{python data_munging}
mushrooms.columns = mushrooms.columns.str.replace('-', '_')
mushrooms = mushrooms.astype('category')
```

```{python summary}
mushrooms.info()
print('')
mushrooms.describe().transpose()
```

Overall, this was a pretty clean dataset with few issues. The only thing I personally do not like is that all of the values are coded with a single indicator letter and that means we have to constantly go back-and-forth between the work being done and the list of meanings or tediously re-code the values. We are going to go with the latter option and recode all of the values. The meanings of the codes can be found at the [Mushroom Classification Kaggle page](https://www.kaggle.com/uciml/mushroom-classification).

```{python}
values = {'class':{'e':'edible', 'p':'poisonous'}, \
          'cap_shape':{'b':'bell', 'c':'conical', 'x':'convex', 'f':'flat', \
                       'k':'knobbed', 's':'sunken'}, \
          'cap_surface':{'f':'fibrous', 'g':'grooves', 'y':'scaly', 's':'smooth'}, \
          'cap_color':{'n':'brown', 'b':'buff', 'c':'cinnamon', 'g':'gray', 'r':'green', \
                       'p':'pink', 'u':'purple', 'e':'red', 'w':'white', 'y':'yellow'}, \
          'bruises':{'t':'presence', 'f':'absense'}, \
          'odor':{'a':'almond', 'l':'anise', 'c':'creosote', 'y':'fishy', 'f':'foul', \
                  'm':'musty', 'n':'none', 'p':'pungent', 's':'spicy'}, \
          'gill_attachment':{'a':'attached', 'd':'descending', 'f':'free', 'n':'notched'}, \
          'gill_spacing':{'c':'close', 'w':'crowded', 'd':'distant'}, \
          'gill_size':{'b':'broad', 'n':'narrow'}, \
          'gill_color':{'k':'black', 'n':'brown', 'b':'buff', 'h':'chocolate', \
                        'g':'gray', 'r':'green', 'o':'orange', 'p':'pink', 'u':'purple', \
                        'e':'red', 'w':'white', 'y':'yellow'}, \
          'stalk_shape':{'e':'enlarging', 't':'tapering'}, \
          'stalk_root':{'b':'bulbous', 'c':'club', 'u':'cup', 'e':'equal', \
                        'z':'rhizomorphs', 'r':'rooted'}, \
          'stalk_surface_above_ring':{'f':'fibrous', 'y':'scaly', 'k':'silky', \
                                      's':'smooth'}, \
          'stalk_surface_below_ring':{'f':'fibrous', 'y':'scaly', 'k':'silky', \
                                      's':'smooth'}, \
          'stalk_color_above_ring':{'n':'brown', 'b':'buff', 'c':'cinnamon', 'g':'gray', \
                                    'o':'orange', 'p':'pink', 'e':'red', 'w':'white', \
                                    'y':'yellow'}, \
          'stalk_color_below_ring':{'n':'brown', 'b':'buff', 'c':'cinnamon', 'g':'gray', \
                                    'o':'orange', 'p':'pink', 'e':'red', 'w':'white', \
                                    'y':'yellow'}, \
          'veil_type':{'p':'partial', 'u':'universal'}, \
          'veil_color':{'n':'brown', 'o':'orange', 'w':'white', 'y':'yellow'}, \
          'ring_number':{'n':'none', 'o':'one', 't':'two'}, \
          'ring_type':{'c':'cobwebby', 'e':'evanescent', 'f':'flaring', 'l':'large', \
                       'n':'none', 'p':'pendant', 's':'sheathing', 'z':'zone'}, \
          'spore_print_color':{'k':'black', 'n':'brown', 'b':'buff', 'h':'chocolate', \
                               'r':'green', 'o':'orange', 'u':'purple', 'w':'white', \
                               'y':'yellow'}, \
          'population':{'a':'abundant', 'c':'clustered', 'n':'numerous', 's':'scattered', \
                        'v':'several', 'y':'solitary'}, \
          'habitat':{'g':'grasses', 'l':'leaves', 'm':'meadows', 'p':'paths', \
                     'u':'urban', 'w':'waste', 'd':'woods'}}
mushrooms = mushrooms.replace(values)
```

That was incredibly tedious and there were many places where an error could have occured, so we should check to make sure that all values have been recoded and we made no mistakes.

```{python}
mushrooms.apply(lambda x: x.value_counts()).transpose().stack()
```

Everything looks good and we can move on to some data visualizations. In reality, it took me a long time to write all of that out and I did make a few mistakes that I had to go back and fix. As a note to anyone collecting and entering data, please do not input your data as a bunch of single letter indicators: it makes it harder on everyone involved, including yourself.

## Data Visualization

Rather than create a 22 static graphs showing how each predictor variable is distributed between poisonous and edible mushrooms, let's make a single, interactive `Bokeh` figure that can do this.

```{python tidy, eval = FALSE}
from bokeh.io import show, curdoc
from bokeh.plotting import figure
from bokeh.palettes import Spectral6
from bokeh.models import HoverTool, ColumnDataSource, FactorRange

col_counts = mushrooms.groupby('class').cap_color.value_counts().\
                       unstack(fill_value=0).stack()
df = pd.DataFrame(col_counts).reset_index()
df.columns = ['edibility', 'cap_color', 'count']
df = df.pivot(index='cap_color',
              columns='edibility',
              values='count').reset_index()
df = df.melt(id_vars='cap_color',
             value_vars=['edible', 'poisonous'],
             var_name='edibility',
             value_name='count')
df = df.sort_values(by='cap_color', axis=0)

x = [(color, status) for color in df.cap_color.unique() \
                     for status in df.edibility.unique()]
counts = list(df['count'])

sorted_x = [('brown', 'edible'), ('brown', 'poisonous'),
            ('gray', 'edible'), ('gray', 'poisonous'),
            ('red', 'edible'), ('red', 'poisonous'),
            ('yellow', 'edible'), ('yellow', 'poisonous'),
            ('white', 'edible'), ('white', 'poisonous'),
            ('buff', 'edible'), ('buff', 'poisonous'),
            ('pink', 'edible'), ('pink', 'poisonous'),
            ('cinnamon', 'edible'), ('cinnamon', 'poisonous'),
            ('green', 'edible'), ('green', 'poisonous'),
            ('purple', 'edible'), ('purple', 'poisonous')]

source = ColumnDataSource(data=dict(x=x, counts=counts))

p = figure(x_range=FactorRange(*sorted_x), title='Mushroom Edibility by Cap Color',
           toolbar_location=None, tools='hover')

p.vbar(x='x', top='counts', width=0.9, source=source, line_color='white', 
       fill_color=factor_cmap('x', palette=['#AA1123', '#2311AA'], 
                              factors=list(df.edibility.unique()), start=1, end=2))

p.hover.tooltips = [
    ('Color', '@x'),
    ('Count', '@counts')
]

p.y_range.start = 0
p.x_range.range_padding = 0.1
p.xaxis.major_label_orientation = 1
p.xgrid.grid_line_color = None

show(p)
```

```{python untidy, eval = FALSE}
from bokeh.core.properties import value
from bokeh.io import show
from bokeh.models import ColumnDataSource
from bokeh.plotting import figure
from bokeh.transform import dodge

col_counts = mushrooms.groupby('class').cap_color.value_counts().\
                       unstack(fill_value=0).stack()
df = pd.DataFrame(col_counts).reset_index()
df.columns = ['edibility', 'cap_color', 'count']
df = df.pivot(index='cap_color',
              columns='edibility',
              values='count').reset_index()
df['total'] = df['edible'] + df['poisonous']
df = df.sort_values(by='total', ascending=False)

source = ColumnDataSource(data=df)

p = figure(x_range=df.cap_color, 
           title='Mushroom Edibility by Cap Color')

p.vbar(x=dodge('cap_color', -0.175, range=p.x_range), 
       top='edible', width=0.30, source=source,
       color='#c9d9d3', legend=value('edible'))

p.vbar(x=dodge('cap_color', 0.175, range=p.x_range), 
       top='poisonous', width=0.30, source=source,
       color='#718dbf', legend=value('poisonous'))

p.y_range.start = 0
p.x_range.range_padding = 0.1
p.xgrid.grid_line_color = None
p.legend.location = 'top_right'
p.legend.orientation = 'vertical'
p.toolbar.autohide = True

show(p)
```

```{r eval = FALSE}
library(tidyverse)
library(plotly)

ggplotly(py$mushrooms %>% 
           mutate(stalk_root = unlist(stalk_root)) %>% 
           mutate_all(as.factor) %>% 
           count(class, cap_color, .drop = FALSE) %>% 
           ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE), 
                      y = n, 
                      fill = class,
                      text = paste0('Colour: ', cap_color, '<br>',
                                    'Edibility: ', class, '<br>',
                                    'Count: ', n))) +
             geom_col(position = 'dodge') +
             labs(x = 'Cap Colour', y = 'Count') +
             theme_minimal(base_family = 'Source Sans Pro ExtraLight') +
             theme(panel.grid.major.x = element_blank(),
                   axis.text.x = element_text(vjust = 5)),
         tooltip = c('text')) 
```

```{r}
py$mushrooms %>% 
        mutate(stalk_root = unlist(stalk_root)) %>% 
        mutate_all(as.factor) %>% 
        count(class, cap_color, .drop = FALSE) %>% 
        ggplot(aes(x = fct_reorder(cap_color, .x = n, .desc = TRUE), 
                   y = n, 
                   fill = class,
                   text = paste0('Colour: ', cap_color, '<br>',
                                 'Edibility: ', class, '<br>',
                                 'Count: ', n))) +
          geom_col(position = 'dodge') +
          labs(x = 'Cap Colour', y = 'Count') +
          scale_x_discrete(labels = c('brown' = 'Brown',
                                      'buff' = 'Buff',
                                      'cinnamon' = 'Cinnamon',
                                      'gray' = 'Gray',
                                      'green' = 'Green',
                                      'pink' = 'Pink',
                                      'red' = 'Red',
                                      'purple' = 'Purple',
                                      'white' = 'White', 
                                      'yellow' = 'Yellow')) +
          scale_fill_discrete(name = 'Edibility',
                              labels = c('edible' = 'Edible',
                                         'poisonous' = 'Poisonous')) +
          theme_minimal(base_family = 'Source Sans Pro') +
          theme(panel.grid.major.x = element_blank(),
                axis.text.x = element_text(vjust = 5,
                                           size = rel(2)),
                axis.text.y = element_text(size = rel(2)),
                axis.title = element_text(size = rel(2)),
                legend.title = element_text(size = rel(1.5)),
                legend.text = element_text(size = rel(1.5)))
```